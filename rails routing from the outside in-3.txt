4. Customizing Resourceful Routes

當resources :article建立預設路由與helper時可以運作得很好，你也許會想用相同方式刻出路由，Rails能給你完全地客制資源式helper的任何部分。

4.1 Specifying a Controller to Use

:controller選項可以明確指定針對resource來使用：
[code]
resources :photos, controller: 'images'
[/code]

路徑依然是/photos、/photos/xxx，行為則由images controller處理。

對namespace controller而言，可以使用目錄表示法：
[code]
resources :user_permissions, controller: 'admin/user_permissions'
[/code]

這將會依照路由連結到Admin::UserPermissions controller。

notice:
唯有目錄表示支援時，指定由Ruby常數表示法來指定controller(例如controller: 'Admin::UserPermissions')會引發路由問題和引起警告。


4.2 Sprcifying Constraints

可以使用:constraints選項來指定id：
[code]
resources :photos, constraints: { id: /[A-Z] [A-Z] [0-9]+/ }
[/code]

這項宣告限制參數:id來符合所提供的正規表示式，如此，路由不再符合/photos/1，取代的是/photos/RR27。

可以指定單項限制給複數路由使用透過區塊格式：
[code]
constraints(id: /[A-Z] [A-Z] [0-9]+/) do
    resources :photos
    resources :accounts
end
[/code]

notice:
當然可以使用更進階的限制在非資源式路由。


4.3 Overriding the Named Helpers

:as選項可以覆寫已命名的路由helper
[code]
resources :photos, as: "images"
[/code]

will recognize incoming paths beginning with /photos and route the requests to PhotosController, but use the value of the :as option to name the helpers.


4.4 Overriding the new and edit Segments

:path_name 選項可以覆寫自動生成的new與edit片段：
[code]
resources :photos, path_names: { new: 'make', edit: 'change' }
[/code]

這會使路由將路徑辨識如：
[code]
/photos/make
/photos/1/change
[/code]


4.5 Prefixing the Named Route Helpers

You can use the :as option to prefix the named route helpers that Rails generates for a route. Use this option to prevent name collisions between routes using a path scope. For example:

可以使用:as做為已命名的route helper的前綴，使用:as可以避免在路由裡的用詞相碰。

[code]
scope 'admin' do
  resources :photos, as: 'admin_photos'
end

resources :photos
[/code]

This will provide route helpers such as admin_photos_path, new_admin_photo_path, etc.

這會給route helper提供如admin_photos_path與new_admin_photo_path等。

To prefix a group of route helpers, use :as with scope:

成群的route helpers加上前綴則用scope加上:as：

[code]
scope 'admin', as: 'admin' do
  resources :photos, :accounts
end

resources :photos, :accounts
[/code]

This will generate routes such as admin_photos_path and admin_accounts_path which map to /admin/photos and /admin/accounts respectively.

路由會產生如admin_photos_path與admin_accounts_path，各自對應到/admin/photos與/admin/accounts


4.6 Restricting the Routes Created

By default, Rails creates routes for the seven default actions(index, show, new, create, edit, update, and destroy) for every RESTful route in your application. You can use the :only and :except options to fine-tune this behavior. The :only option tells Rails to create only the specified routes:

Rails對七個行為建立路由，可以用:only與:except進行微調。:only建立唯一指定：

[code]
resources :photos, only: [:index, :show]
[/code]

Now, a GET request to /photos would succeed, but a POST request to /photos (which would ordinarily be routed to the create action) will fail.

GET請求之於/photos會成功，POST之於/photos(通常會經路由對應到create action)則會否。

The :except option specifies a route or list of routes that Rails should not create:

:except指定路徑不應該生成：

[code]
resources :photos, except: :destroy
[/code]

In this case, Rails will create all of the normal routes except the route for destroy (a DELETE request to /photos/:id).

此例中Rails會建立所有一般路由，不包括destroy(DELETE請求之於/photos/:id)。

notice:
If your application has many RESTful routes, using :only and :except to generate only the routes that you actually need can cut down on memory use and speed up the routing process.

注意：
若你的app有許多資源式路由，使用:only與:except來生成僅需要的路由，可以減少記憶體使用並加速路由處理。


4.7 Translated Paths

Using scope, we can alter path names generated by resources:

使用scope可以

[code]
scope (path_names: { new: 'neu', edit: 'bearbeiten' }) do
  resources :categories, path: 'kategorien'
end
[/code]

在Controller與Named helper仍維持categories#index，categories_path以外，Path變更為/kategorien。


4.8 Overriding the Singular Form

If you want to define singular form of a resource you should add additional rules to the Inflector:

若需定義單數形式的資源需要另外加入規範到Inflector:

[code]
ActiveSupport::Inflector.inflections do |inflect|
  inflect.irregular 'tooth', 'teeth'
end
[/code]


4.0 Using :as in Nested Resources

The :as option overrides the automatically-generated name for the resources in nested route helpers.

對於巢狀路由自動生成的資源以:as覆寫：

[code]
resources :magazines do
  resources :ads, as: 'periodical_ads'
end
[/code]

This will create routing helpers such as magazine_periodical_ads_url and edit_magazine_periodical_ad_path


4.10 Overriding Named Route Parameters




















